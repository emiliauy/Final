package uiGrafica.jugador;

import InterfazUsuario.CU_JugarPoker.Controlador_JugadorPoker;
import InterfazUsuario.CU_JugarPoker.Vista_JugadorPoker;
import Modelo.Carta;
import Modelo.EventosGenerales.Eventos;
import Modelo.Jugador;
import Modelo.MesaPoker;
import Modelo.PokerException;
import Modelo.Sesion;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import panelCartasPoker.CartaPoker;
import panelCartasPoker.PanelCartasListener;
import panelCartasPoker.PanelCartasPokerException;

/**
 *
 * @author Emilia
 */
public class JuegoPoker extends javax.swing.JFrame implements PanelCartasListener, Vista_JugadorPoker {

    /**
     * Creates new form JuegoPoker
     */
    private Controlador_JugadorPoker controlador;
    private Sesion sesion;

    public JuegoPoker(MesaPoker mesa, Sesion sesion) throws PokerException {
        initComponents();
        Jugador usuario = (Jugador) sesion.getUsuario();
        this.sesion = sesion;
        controlador = new Controlador_JugadorPoker(this, usuario, mesa);
        setLocationRelativeTo(null);
        setTitle(controlador.obtenerTitulo());
        panel_cartas.setListener(this);
    //    habilitarBotones(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_mensaje = new javax.swing.JLabel();
        btn_pedirCartas = new javax.swing.JButton();
        btn_iniciarApuesta = new javax.swing.JButton();
        btn_pagarApuesta = new javax.swing.JButton();
        btn_pasar = new javax.swing.JButton();
        panel_cartas = new panelCartasPoker.PanelCartasPoker();
        btn_abandonarMesa = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txt_apuestaInicial = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        label_mensaje.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        label_mensaje.setText("..............................");

        btn_pedirCartas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_pedirCartas.setText("Pedir Cartas");
        btn_pedirCartas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pedirCartasActionPerformed(evt);
            }
        });

        btn_iniciarApuesta.setText("Iniciar");
        btn_iniciarApuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_iniciarApuestaActionPerformed(evt);
            }
        });

        btn_pagarApuesta.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_pagarApuesta.setText("Pagar");
        btn_pagarApuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pagarApuestaActionPerformed(evt);
            }
        });

        btn_pasar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_pasar.setText("Pasar");
        btn_pasar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pasarActionPerformed(evt);
            }
        });

        btn_abandonarMesa.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btn_abandonarMesa.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_abandonarMesa.setText("Abandonar");
        btn_abandonarMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_abandonarMesaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Apuesta Inicial : ");

        txt_apuestaInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_apuestaInicialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(label_mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_apuestaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_iniciarApuesta))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panel_cartas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btn_pagarApuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_pasar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(424, 424, 424)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_abandonarMesa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_pedirCartas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_mensaje)
                    .addComponent(btn_iniciarApuesta)
                    .addComponent(jLabel1)
                    .addComponent(txt_apuestaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(panel_cartas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_pasar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_pagarApuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(btn_pedirCartas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(btn_abandonarMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_iniciarApuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_iniciarApuestaActionPerformed
        // TODO add your handling code here:
        iniciarApuesta();
    }//GEN-LAST:event_btn_iniciarApuestaActionPerformed

    private void btn_pagarApuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pagarApuestaActionPerformed
        // TODO add your handling code here:
        pagarApuesta();
    }//GEN-LAST:event_btn_pagarApuestaActionPerformed

    private void btn_pasarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pasarActionPerformed
        try {
            // TODO add your handling code here:
            pasarApuesta();
        } catch (PokerException ex) {
            Logger.getLogger(JuegoPoker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_pasarActionPerformed

    private void btn_pedirCartasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pedirCartasActionPerformed
        try {
            // TODO add your handling code here:
            cambiarCartas();
        } catch (PokerException ex) {
            Logger.getLogger(JuegoPoker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_pedirCartasActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        salir();

    }//GEN-LAST:event_formWindowClosing

    private void btn_abandonarMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_abandonarMesaActionPerformed
        try {
            // TODO add your handling code here:
            controlador.abandonarMesa();
        } catch (PokerException ex) {
            Logger.getLogger(JuegoPoker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_abandonarMesaActionPerformed

    private void txt_apuestaInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_apuestaInicialActionPerformed
        // TODO add your handling code here:
        iniciarApuesta();

    }//GEN-LAST:event_txt_apuestaInicialActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_abandonarMesa;
    private javax.swing.JButton btn_iniciarApuesta;
    private javax.swing.JButton btn_pagarApuesta;
    private javax.swing.JButton btn_pasar;
    private javax.swing.JButton btn_pedirCartas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel label_mensaje;
    private panelCartasPoker.PanelCartasPoker panel_cartas;
    private javax.swing.JTextField txt_apuestaInicial;
    // End of variables declaration//GEN-END:variables

    // Métodos auxiliares
    private void iniciarApuesta() {
        try {
            String montoStr = txt_apuestaInicial.getText().trim();
            double monto = Double.parseDouble(montoStr);
            controlador.iniciarApuesta(monto);

        } catch (NumberFormatException e) {
            mostrarError("Por favor, ingresa un monto válido.");
        }
    }

    private void pagarApuesta() {
        controlador.pagarApuesta();
    }

    private void pasarApuesta() throws PokerException {
        try {
            controlador.pasarApuesta();
        } catch (PokerException e) {
            mostrarError("No se pudo pasar: " + e.getMessage());
        }
    }

    private void cambiarCartas() throws PokerException {
        try {
            controlador.cambiarCartas();
        } catch (PokerException e) {
            mostrarError("Error al cambiar cartas: " + e.getMessage());
        }
    }

    @Override
    public void actualizarPozo(double totalPozo) {
        label_mensaje.setText("Pozo total: $" + totalPozo);
    }

    @Override
    public void actualizarJugadores(ArrayList<Jugador> jugadores) {
        for (Jugador jugador : jugadores) {
            mostrarMensaje("Jugador: " + jugador.getNombreCompleto() + ", Saldo: $" + jugador.getSaldo());
        }
    }

    @Override
    public void mostrarCartas(ArrayList<Carta> cartas) {
        try {
            ArrayList<CartaPoker> cartasPoker = new ArrayList<>();
            for (Carta carta : cartas) {
                cartasPoker.add((CartaPoker) carta);
            }
            panel_cartas.cargarCartas(cartasPoker); //llama al metodo cargarCartas del panel
        } catch (PanelCartasPokerException e) {
            mostrarError("Error al cargar las cartas: " + e.getMessage());
        }
    }

    @Override
    public void mostrarGanador(Jugador ganador) {
        mostrarMensaje("El ganador es: " + ganador.getNombreCompleto());
    }

    @Override
    public void mostrarMensajeEnEtiqueta(String mensaje) {
        label_mensaje.setText(mensaje);
    }

    @Override
    public void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Notificación", JOptionPane.DEFAULT_OPTION);
    }

    @Override
    public void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void mostrarApuestaActual(double apuesta) {
        label_mensaje.setText("Apuesta actual: $" + apuesta);
    }

    @Override
    public void finalizarRonda() {
        mostrarMensaje("La ronda ha finalizado.");
    }

    @Override
    public void clickEnCarta(CartaPoker carta) {
        try {
            controlador.gestionarClickEnCarta(carta);
        } catch (PokerException ex) {
            mostrarError("Error al seleccionar cartas: " + ex.getMessage());
        }
    }

    @Override
    public void mesasAbiertas() {
        new MesasAbiertas(null, false, this.sesion).setVisible(true);
        this.dispose();

    }

    private void manejarEstadoJuego(Eventos evento) {
        if (evento == Eventos.INICIA_JUEGO) {
            habilitarBotones(true);
            mostrarMensajeEnEtiqueta("El juego ha comenzado.");
        } else if (evento == Eventos.FINALIZA_JUEGO) {
            habilitarBotones(false);
            mostrarMensajeEnEtiqueta("El juego ha finalizado.");
        }
    }

    @Override
    public void habilitarBotones(boolean habilitado) {
        btn_iniciarApuesta.setEnabled(habilitado);
        btn_pagarApuesta.setEnabled(habilitado);
        btn_pasar.setEnabled(habilitado);
        btn_pedirCartas.setEnabled(habilitado);
    }

    @Override
    public void actualizarVista(Eventos evento, Object data) {
        switch (evento) {
            case CAMBIA_POZO:
                actualizarPozo((Double) data);
                break;
            case CAMBIA_CANTIDAD_JUGADORES:
                actualizarJugadores((ArrayList<Jugador>) data);
                break;
            case INICIA_JUEGO:
                habilitarBotones(true);
                mostrarMensajeEnEtiqueta("El juego ha comenzado.");
                break;
            case FINALIZA_JUEGO:
                habilitarBotones(false);
                mostrarGanador((Jugador) data);
                break;
            default:
                mostrarMensaje("Evento no reconocido: " + evento);
        }
    }

    @Override
    public void actualizarEstadoJugadores(Object evento, ArrayList<Jugador> jugadoresMesa) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void salir() {
        try {
            controlador.abandonarMesa();
            mesasAbiertas();

        } catch (PokerException ex) {
            mostrarError("Ocurrió un error al abandonar la mesa: " + ex.getMessage());

        }
    }

}
